@model IEnumerable<CartItem>

<div class="cart-container">
    <h2>Your Shopping Cart</h2>

    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Price</th>
                <th>Size</th>
                <th>Sugar</th>
                <th>Temp</th>
                <th>Quantity</th>
                <th>Subtotal</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var i in Model)
            {
                // Declare variables for current selections
                var sizes = new[] { "S", "M", "L" };
                var sugars = new[] { "Low", "Normal", "Medium" };
                var temps = new[] { "Cold", "Hot" };

                var currentSize = string.IsNullOrEmpty(i.Size) ? "Normal" : i.Size;
                var currentSugar = string.IsNullOrEmpty(i.SugarLevel) ? "Normal" : i.SugarLevel;
                var currentTemp = string.IsNullOrEmpty(i.Temperature) ? "Cold" : i.Temperature;

                <tr>
                    <td>
                        <img src="/Beverage/@i.Beverage.PhotoURL" style="width: 60px; height: auto;">
                        @i.Beverage.Name
                    </td>
                    <td>RM @i.Beverage.Price</td>

                    <!-- Size dropdown -->
                    <td>
                        <select name="Size" class="cart-option" data-id="@i.Beverage.Id" data-type="Size">
                            @foreach (var s in sizes)
                            {
                                <option value="@s" selected="@(s == currentSize ? "selected" : null)">@s</option>
                            }
                        </select>
                    </td>

                    <!-- Sugar dropdown -->
                    <td>
                        <select name="SugarLevel" class="cart-option" data-id="@i.Beverage.Id" data-type="SugarLevel">
                            @foreach (var s in sugars)
                            {
                                <option value="@s" selected="@(s == currentSugar ? "selected" : null)">@s</option>
                            }
                        </select>
                    </td>

                    <!-- Temp dropdown -->
                    <td>
                        <select name="Temperature" class="cart-option" data-id="@i.Beverage.Id" data-type="Temperature">
                            @foreach (var t in temps)
                            {
                                <option value="@t" selected="@(t == currentTemp ? "selected" : null)">@t</option>
                            }
                        </select>
                    </td>

                    <!-- Quantity and remove -->
                    <td>
                        <input type="number" name="Quantity" value="@i.Quantity" min="1" max="100" class="qty-input" data-id="@i.Beverage.Id" />
                    </td>

                    <td>RM @i.Subtotal.ToString("0.00")</td>

                    <!-- Remove button -->
                    <td>
                        <button type="button" class="btn btn-danger remove-cart-item" data-product-id="@i.Beverage.Id">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Cart summary -->
    <div class="cart-summary">
        <p>Total Quantity: @Model.Sum(i => i.Quantity)</p>
        <p>Total Price: RM @Model.Sum(i => i.Subtotal).ToString("0.00")</p>
    </div>

    <!-- Checkout button -->
    @if (Model.Count() > 0)
    {
        <form method="post" action="/Home/Checkout">
            <input type="hidden" name="total" value="@Model.Sum(i => i.Subtotal).ToString("0.00")" />
            <input type="hidden" name="staffemail" value="@User.Identity.Name" />
            <p>
                Customer Name :
                <input type="text" name="customername" />
            </p>
            <p>
                Customer Email :
                <input type="text" name="customeremail" />
            </p>

            <button type="submit" class="btn btn-primary">Proceed to Checkout</button>
        </form>
    }
</div>

<script>
    // Handle dropdown changes
    $('.cart-option').on('change', function () {
        updateCartItem($(this));
    });

    // Handle quantity input changes
    $('.qty-input').on('change', function () {
        updateCartItem($(this));
    });

    function updateCartItem(element) {
        var row = element.closest('tr');
        var productId = element.data('id');
        var size = row.find('[data-type="Size"]').val();
        var sugar = row.find('[data-type="SugarLevel"]').val();
        var temp = row.find('[data-type="Temperature"]').val();
        var qty = row.find('.qty-input').val();

        $.ajax({
            url: '/Home/UpdateCart',
            type: 'POST',
            data: {
                ProductId: productId,
                Size: size,
                SugarLevel: sugar,
                Temperature: temp,
                Quantity: qty
            },
            success: function () {
                // Optionally reload the page to update totals, or use JS to update subtotal.
                location.reload();
            },
            error: function () {
                alert("Failed to update cart item.");
            }
        });
    }

    $('.remove-cart-item').on('click', function () {
        var productId = $(this).data('product-id');

        $.ajax({
            url: '/Home/RemoveCart',
            type: 'POST',
            data: { ProductId: productId },
            success: function () {
                location.reload(); // Reload the cart page after removal
            },
            error: function () {
                alert("Failed to remove item from cart.");
            }
        });
    });
</script>